spring.application.name=intelligent-support-backend
# ===================================================================
# APPLICATION CONFIGURATION
# ===================================================================
# Port sur lequel l'application va tourner
server.port=8082

# ===================================================================
# POSTGRESQL DATABASE CONFIGURATION
# ===================================================================
# URL de connexion à votre base de données locale
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
# Nom d'utilisateur de votre base de données
spring.datasource.username=postgres
# Mot de passe de votre base de données
spring.datasource.password=1234
# Driver pour PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuration de JPA (Java Persistence API)
# 'update' : Spring va essayer de mettre à jour le schéma de la base de données
# au démarrage en se basant sur vos classes Java. Très pratique en développement.
spring.jpa.hibernate.ddl-auto=update
# Affiche les requêtes SQL dans la console, utile pour le débogage
spring.jpa.show-sql=true


# ===================================================================
# REDIS CACHE CONFIGURATION
# ===================================================================
# Adresse de votre serveur Redis local (par défaut)
spring.data.redis.host=localhost
# Port de votre serveur Redis local (par défaut)
spring.data.redis.port=6379

# spring.profiles.active=dev
# ===================================================================
# EXTERNAL SERVICES CONFIGURATION
# ===================================================================
# URLs de base pour les APIs externes
zammad.api.base-url=http://localhost:8080/api/v1
#gemini.api.base-url=https://generativelanguage.googleapis.com/v1beta
#chatbot.api.url=http://localhost:8000/predict
rag.api.url=http://127.0.0.1:10000/query
# Emplacements des secrets (JETONS / CLES API)
# IMPORTANT: On ne met pas les clés ici.
# La syntaxe ${...} dit à Spring de chercher une "variable d'environnement"
# portant ce nom. C'est la bonne pratique pour la sécurité.
zammad.api.token=${ZAMMAD_API_TOKEN}
gemini.api.key=${GEMINI_API_KEY}